package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
	"time"
)

type Bot struct {
	Token       string //–¢–æ–∫–µ–Ω
	TypeMessage string //–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π
	TokenUrl    string //–°—Å—ã–ª–∫–∞ –≤–º–µ—Å—Ç–µ —Å —Ç–æ–∫–µ–Ω–æ–º
	MsgText     string
	SetKeyName  []string
}

var bot Bot

const TIME_UPDATE_BOT time.Duration = 500 * time.Millisecond //–ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±–Ω–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ get

var sendMessengeBot SendMessenge
var sendAudioBot SendAudio
var sendVideoBot SendVideo
var sendPhotoBot sendPhoto
var sendDiceBot SendDice
var sendKeyBoardBot SendKeyBoard
var botMessage BotMessage

func main() {

	bot.TokenUrl = "https://api.telegram.org/bot" + bot.Token

	offset := 0
	fmt.Println("–°—Ç–∞—Ä—Ç:")

	for {

		updates, err := getUpdates(offset)

		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ ", err.Error())
		}

		if len(updates) > 0 { //–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –Ω–µ –ø—É—Å—Ç–æ–µ
			//–í—ã–≤–µ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º—è  –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–≥–æ –ø—Ä–∏—à–ª–æ
			fmt.Println("\n-", updates[0].Message.Chat.Username, ":", updates[0].Message.Text)
			bot.MsgText = updates[0].Message.Text //–ó–∞–ø–∏—à–µ–º —Ç–µ–∫—Å—Ç —á—Ç–æ –ø—Ä–∏—à–æ–ª
			botMessage.ChatID = updates[0].Message.Chat.ChatID

			botMessage.Username = updates[0].Message.Chat.Username

			UpdateBotBot() //–û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ —á—Ç–æ —Ç–æ –ø—Ä–∏—à–ª–æ
			for _, update := range updates {
				offset = update.UpdateID + 1 //–ü–æ–ª—É—á–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			}

		}

		time.Sleep(TIME_UPDATE_BOT) //–Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
	}

}

func getUpdates(offset int) ([]Update, error) {

	update, err := http.Get(bot.TokenUrl + "/getUpdates" + "?offset=" + strconv.Itoa(offset))
	if err != nil {
		return nil, err
	}

	defer update.Body.Close()

	contents, err := io.ReadAll(update.Body)
	if err != nil {
		return nil, err
	}

	var updateResponse UpdateResponse

	err = json.Unmarshal(contents, &updateResponse)
	if err != nil {
		return nil, err
	}

	return updateResponse.Result, nil
}

func sendPhote(caption string, url string) {
	bot.TypeMessage = "sendPhoto"
	sendPhotoBot.Photo = url
	sendPhotoBot.Caption = caption
	sendPhotoBot.ParseMode = "HTML"
	sendPhotoBot.ChatID = botMessage.ChatID

	buf, err := json.Marshal(sendPhotoBot)
	if err != nil {
		return
	}

	postBot(buf)
}

func sendMessage(text string) {
	bot.TypeMessage = "sendMessage"
	sendMessengeBot.ParseMode = "HTML"
	sendMessengeBot.ChatID = botMessage.ChatID
	sendMessengeBot.Text = text

	buf, err := json.Marshal(sendMessengeBot)
	if err != nil {
		return
	}

	postBot(buf)
}

func sendAudio(url string) {

	if getSizeFile(url) < 20000000 { //#–ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –±–æ–ª—å—à–µ 50–º–±

		bot.TypeMessage = "sendAudio"
		sendAudioBot.Audio = url
		//sendAudioBot.Title = "–¢–µ—Å—Ç"
		//sendAudioBot.Caption = "–î–æ–ø –∏–Ω—Ñ–∞!!!!!!!!!!!!!!"
		sendAudioBot.ChatID = botMessage.ChatID

		buf, err := json.Marshal(sendAudioBot)
		if err != nil {
			return
		}
		//	fmt.Println("–†—Ñ–∑–º–µ—Ä —Ñ–∞–π–ª–∞", getSizeFile(url), url)
		postBot(buf)
	} else {
		sendMessage("<a href='" + url + "'>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π - —Å–ª—É—à–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ..</a>")
		fmt.Println("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π", getSizeFile(url), url)
		return
	}
}

func sendDice(emoji string) {
	bot.TypeMessage = "sendDice"
	sendDiceBot.Emoji = emoji
	sendDiceBot.ChatID = botMessage.ChatID
	buf, err := json.Marshal(sendDiceBot)
	if err != nil {
		return
	}

	postBot(buf)

	//  Currently, must be one of ‚Äúüé≤‚Äù, ‚ÄúüéØ‚Äù, ‚ÄúüèÄ‚Äù, ‚Äú‚öΩ‚Äù, ‚Äúüé≥‚Äù, or ‚Äúüé∞‚Äù.
	//  Dice can have values 1-6 for ‚Äúüé≤‚Äù, ‚ÄúüéØ‚Äù and ‚Äúüé≥‚Äù,
	//  values 1-5 for ‚ÄúüèÄ‚Äù and ‚Äú‚öΩ‚Äù,
	//  and values 1-64 for ‚Äúüé∞‚Äù. Defaults to ‚Äúüé≤‚Äù
}

func sendVideo(url string) {
	bot.TypeMessage = "sendVideo"
	sendVideoBot.Vdeo = url
	//sendAudioBot.Title = "–¢–µ—Å—Ç"
	//sendAudioBot.Caption = "–î–æ–ø –∏–Ω—Ñ–∞!!!!!!!!!!!!!!"
	sendVideoBot.ChatID = botMessage.ChatID

	buf, err := json.Marshal(sendVideoBot)
	if err != nil {
		return
	}

	postBot(buf)
}

func postBot(buff []byte) { //–æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º–º
	fmt.Println(string(buff))
	http.Post(bot.TokenUrl+"/"+bot.TypeMessage, "application/json", bytes.NewBuffer(buff))

}

func sendKeyBoard() {

	bot.TypeMessage = "sendMessage"
	sendKeyBoardBot.ParseMode = "HTML"
	sendKeyBoardBot.ChatID = botMessage.ChatID

	sendKeyBoardBot.ReplyMarkup.ResizeKeyboard = true
	sendKeyBoardBot.Text = "–†–µ—Å—Ç–∞—Ä—Ç : –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ç–ø."

	sendKeyBoardBot.ReplyMarkup.Keyboard[0] = make([]Keyboard, len(bot.SetKeyName))

	for i := range bot.SetKeyName {

		sendKeyBoardBot.ReplyMarkup.Keyboard[0][i].Text = bot.SetKeyName[i]
		sendKeyBoardBot.ReplyMarkup.Keyboard[0][i].CallbackData = bot.SetKeyName[i] //–ü–æ–∫–∞ –Ω–µ–∑–Ω–∞—é –∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ , –∑–∞–ø–∏—Å—ã–≤–∞—é —Ç–µ–∫—Å—Ç
	}

	buf, err := json.Marshal(sendKeyBoardBot)
	if err != nil {
		return
	}

	postBot(buf)
}

func help() string {

	fContent, err := ioutil.ReadFile("file/documents/help.txt")
	if err != nil {
		panic(err)
	}
	fmt.Println(string(fContent))
	return string(fContent)
}
